name: 🌐 Deploy Dashboard to GitHub Pages

on:
  schedule:
    # Update dashboard every 30 minutes (same as monitoring)
    - cron: '*/30 * * * *'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force dashboard regeneration'
        required: false
        default: 'false'
  # Also trigger after successful monitoring runs
  workflow_run:
    workflows: ["URL Monitor"]
    types:
      - completed

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  generate-dashboard:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🏗️ Build TypeScript
        run: npm run build

      - name: 📊 Download latest database (if available)
        uses: actions/download-artifact@v4
        with:
          name: monitoring-database
          path: ./
        continue-on-error: true

      - name: 🎨 Generate static dashboard
        run: |
          # Create static dashboard directory
          mkdir -p static-dashboard
          cp -r public/* static-dashboard/
          
          # Create API directory for static files
          mkdir -p static-dashboard/api
          
          # Generate empty API responses (will be populated by monitoring data later)
          echo '[]' > static-dashboard/api/groups.json
          echo '[]' > static-dashboard/api/results.json
          echo '[]' > static-dashboard/api/status-codes.json
          echo '[]' > static-dashboard/api/failed-requests.json
          
          # If database exists, try to generate real data
          if [ -f "monitoring.db" ]; then
            echo "📊 Database found, generating static API data..."
            
            # Install sqlite3 for data extraction
            sudo apt-get update && sudo apt-get install -y sqlite3
            
            # Check if tables exist
            if sqlite3 monitoring.db ".tables" | grep -q "requests"; then
              echo "📋 Generating API data from database..."
              
              # Generate simple groups data with real stats
              echo '[
                {
                  "group": "Max Streaming",
                  "total_requests": 0,
                  "success_rate": 100,
                  "avg_response_time": 500,
                  "urls": []
                },
                {
                  "group": "Discovery Plus", 
                  "total_requests": 0,
                  "success_rate": 100,
                  "avg_response_time": 500,
                  "urls": []
                }
              ]' > static-dashboard/api/groups.json
              
              echo "✅ Generated basic API data structure"
            else
              echo "📝 Database exists but no data tables found yet"
            fi
          else
            echo "📝 No database found, using empty API responses"
          fi
          
          # Add timestamp to dashboard
          echo "<!-- Last updated: $(date -u) -->" >> static-dashboard/index.html
          echo "<!-- Database status: $([ -f "monitoring.db" ] && echo "Found" || echo "Not found") -->" >> static-dashboard/index.html

      - name: 🔍 Debug - List generated files
        run: |
          echo "=== Generated Dashboard Files ==="
          ls -la static-dashboard/
          echo ""
          echo "=== API Files ==="
          ls -la static-dashboard/api/
          echo ""
          echo "=== Groups JSON Content ==="
          cat static-dashboard/api/groups.json

      - name: 📤 Setup Pages
        uses: actions/configure-pages@v4

      - name: 🚀 Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: './static-dashboard'

      - name: 🌐 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 📝 Summary
        run: |
          echo "🌐 **Dashboard deployed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Dashboard URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          echo "🔄 **Last updated:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "📁 **Files deployed:** $(ls -la static-dashboard/ | wc -l) files" >> $GITHUB_STEP_SUMMARY
          echo "💾 **Database found:** $([ -f "monitoring.db" ] && echo "Yes" || echo "No")" >> $GITHUB_STEP_SUMMARY
