name: 🌐 Deploy Dashboard to GitHub Pages

on:
  workflow_run:
    workflows: ["URL Monitor"]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force dashboard regeneration'
        required: false
        default: 'false'
      time_range_hours:
        description: 'Hours of historical data (default: 24)'
        required: false
        default: '24'

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  deploy-dashboard:
    # Only run if the monitoring workflow succeeded OR if manually triggered
    if: github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 📊 Download database from successful monitoring run
      if: github.event_name == 'workflow_run'
      uses: actions/download-artifact@v4
      with:
        name: monitor-database-artifact
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ github.event.workflow_run.id }}
      continue-on-error: true

    - name: 📊 Download latest database (manual trigger)
      if: github.event_name == 'workflow_dispatch'
      uses: actions/download-artifact@v4
      with:
        name: monitor-database-artifact
      continue-on-error: true

    - name: 🔍 Check database status
      run: |
        if [ -f "monitor.db" ]; then
          echo "✅ Database downloaded successfully"
          echo "📏 Size: $(ls -lh monitor.db | awk '{print $5}')"
          echo "📊 Records: $(sqlite3 monitor.db 'SELECT COUNT(*) FROM requests;' 2>/dev/null || echo '0')"
        else
          echo "⚠️ No database found - creating empty one for first run"
          sqlite3 monitor.db "
            CREATE TABLE requests (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              url TEXT NOT NULL,
              name TEXT NOT NULL,
              countryCode TEXT,
              group_name TEXT,
              timestamp TEXT NOT NULL,
              status INTEGER NOT NULL,
              responseTime INTEGER NOT NULL,
              success BOOLEAN NOT NULL,
              error TEXT
            );
          "
        fi

    - name: 🎨 Generate dashboard with real data
      run: |
        mkdir -p dashboard/api
        cp -r public/* dashboard/ 2>/dev/null || echo "No public directory found"
        
        TIME_RANGE="${{ github.event.inputs.time_range_hours || '24' }}"
        RECORD_COUNT=$(sqlite3 monitor.db "SELECT COUNT(*) FROM requests;" 2>/dev/null || echo "0")
        
        echo "📊 Generating dashboard for $RECORD_COUNT records ($TIME_RANGE hours)"
        
        if [ "$RECORD_COUNT" -gt 0 ]; then
          # Real data from your monitoring
          sqlite3 monitor.db -json "
            SELECT * FROM requests 
            WHERE datetime(timestamp) >= datetime('now', '-$TIME_RANGE hours') 
            ORDER BY timestamp DESC;
          " > dashboard/api/results.json
          
          sqlite3 monitor.db -json "
            SELECT 
              url, name, group_name, countryCode,
              COUNT(*) as totalRequests,
              SUM(CASE WHEN success = 1 THEN 1 ELSE 0 END) as successfulRequests,
              SUM(CASE WHEN success = 0 THEN 1 ELSE 0 END) as failedRequests,
              ROUND(AVG(CASE WHEN success = 1 THEN 1.0 ELSE 0.0 END) * 100, 2) as successRate,
              ROUND(AVG(responseTime), 0) as averageResponseTime,
              MAX(timestamp) as lastChecked
            FROM requests 
            WHERE datetime(timestamp) >= datetime('now', '-$TIME_RANGE hours')
            GROUP BY url, name, group_name, countryCode
            ORDER BY name;
          " > dashboard/api/stats.json
        else
          # Empty data for first run
          echo "[]" > dashboard/api/results.json
          echo "[]" > dashboard/api/stats.json
        fi
        
        echo "[]" > dashboard/api/group-hierarchy.json
        
        echo "<!-- Generated: $(date -u) -->" >> dashboard/index.html
        echo "<!-- Records: $RECORD_COUNT -->" >> dashboard/index.html

    - name: 🚀 Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dashboard
        enable_jekyll: false

    - name: 📝 Summary
      run: |
        RECORD_COUNT=$(sqlite3 monitor.db "SELECT COUNT(*) FROM requests;" 2>/dev/null || echo "0")
        echo "🎉 Dashboard deployed with $RECORD_COUNT database records"