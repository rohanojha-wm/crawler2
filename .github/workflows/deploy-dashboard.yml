name: 🌐 Deploy Dashboard to GitHub Pages

on:
  schedule:
    # Update dashboard every 15 minutes (same as monitoring)
    - cron: '*/15 * * * *'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force dashboard regeneration'
        required: false
        default: 'false'
  # Also trigger after successful monitoring runs
  workflow_run:
    workflows: ["🔍 URL Monitor"]
    types:
      - completed

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  generate-dashboard:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🏗️ Build TypeScript
        run: npm run build

      - name: 📊 Download latest database
        uses: actions/download-artifact@v4
        with:
          name: monitoring-database
          path: ./
        continue-on-error: true

      - name: 🎨 Generate static dashboard with data
        run: |
          # Create static dashboard directory
          mkdir -p static-dashboard
          cp -r public/* static-dashboard/
          
          # Generate API data files if database exists
          if [ -f "monitoring.db" ]; then
            echo "📊 Generating static API data from database..."
            
            # Create API directory
            mkdir -p static-dashboard/api
            
            # Generate static API responses
            node -e "
              const express = require('express');
              const fs = require('fs');
              const path = require('path');
              
              // Import our API routes (we'll extract the logic)
              const { Database } = require('./dist/database');
              
              async function generateStaticAPI() {
                const db = new Database();
                await db.initialize();
                
                try {
                  // Generate groups data
                  const groups = await db.getGroupStats();
                  fs.writeFileSync('static-dashboard/api/groups.json', JSON.stringify(groups, null, 2));
                  
                  // Generate results data
                  const results = await db.getResults();
                  fs.writeFileSync('static-dashboard/api/results.json', JSON.stringify(results, null, 2));
                  
                  // Generate status codes data
                  const statusCodes = await db.getStatusCodes();
                  fs.writeFileSync('static-dashboard/api/status-codes.json', JSON.stringify(statusCodes, null, 2));
                  
                  // Generate failed requests data
                  const failedRequests = await db.getFailedRequests();
                  fs.writeFileSync('static-dashboard/api/failed-requests.json', JSON.stringify(failedRequests, null, 2));
                  
                  console.log('✅ Static API files generated successfully');
                } catch (error) {
                  console.error('Error generating static API:', error);
                } finally {
                  db.close();
                }
              }
              
              generateStaticAPI();
            "
          else
            echo "📝 No database found, creating empty API responses..."
            mkdir -p static-dashboard/api
            echo '[]' > static-dashboard/api/groups.json
            echo '[]' > static-dashboard/api/results.json
            echo '[]' > static-dashboard/api/status-codes.json
            echo '[]' > static-dashboard/api/failed-requests.json
          fi
          fi
          
          # Add timestamp to dashboard
          echo "<!-- Last updated: $(date -u) -->" >> static-dashboard/index.html

      - name: 📤 Setup Pages
        uses: actions/configure-pages@v4

      - name: 🚀 Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: './static-dashboard'

      - name: 🌐 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 📝 Summary
        run: |
          echo "🌐 **Dashboard deployed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Dashboard URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_STEP_SUMMARY
          echo "🔄 **Last updated:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "📁 **Files deployed:** $(ls -la static-dashboard/ | wc -l) files" >> $GITHUB_STEP_SUMMARY
