name: Generate Dashboard Report

on:
  # Run after URL monitoring completes
  workflow_run:
    workflows: ["URL Monitor"]
    types:
      - completed
  
  # Allow manual trigger
  workflow_dispatch:

jobs:
  generate-dashboard:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Download database artifact
      uses: actions/download-artifact@v4
      with:
        name: monitoring-database
        path: .
      continue-on-error: true
    
    - name: Generate static dashboard
      run: |
        # Create a static HTML report
        node -e "
        const fs = require('fs');
        const Database = require('sqlite3').Database;
        
        // Create static dashboard data
        const db = new Database('./monitoring.db', (err) => {
          if (err) {
            console.log('No database found, creating empty report');
            createEmptyReport();
            return;
          }
          
          // Query recent data
          db.all('SELECT * FROM requests ORDER BY timestamp DESC LIMIT 100', (err, rows) => {
            if (err) {
              createEmptyReport();
              return;
            }
            
            // Generate groups data
            const groups = {};
            rows.forEach(row => {
              const group = row.group_name || 'Ungrouped';
              if (!groups[group]) {
                groups[group] = { total: 0, success: 0, failures: [], avgTime: 0 };
              }
              groups[group].total++;
              if (row.success) groups[group].success++;
              else groups[group].failures.push(row);
              groups[group].avgTime += row.responseTime;
            });
            
            Object.keys(groups).forEach(key => {
              groups[key].successRate = (groups[key].success / groups[key].total * 100).toFixed(1);
              groups[key].avgTime = Math.round(groups[key].avgTime / groups[key].total);
            });
            
            // Generate HTML
            const html = generateDashboardHTML(groups, rows);
            fs.writeFileSync('./docs/index.html', html);
            
            // Generate failed requests page
            const failedRows = rows.filter(r => !r.success);
            const failedHTML = generateFailedRequestsHTML(failedRows);
            fs.writeFileSync('./docs/failed-requests.html', failedHTML);
            
            console.log('Static dashboard generated successfully');
          });
        });
        
        function createEmptyReport() {
          const html = generateDashboardHTML({}, []);
          fs.mkdirSync('./docs', { recursive: true });
          fs.writeFileSync('./docs/index.html', html);
          fs.writeFileSync('./docs/failed-requests.html', generateFailedRequestsHTML([]));
        }
        
        function generateDashboardHTML(groups, data) {
          return \`<!DOCTYPE html>
<html>
<head>
    <title>URL Monitor Dashboard</title>
    <meta charset='utf-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; margin: 20px; background: #f5f5f5; }
        .header { background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 20px; }
        .card { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .success { color: #28a745; }
        .warning { color: #ffc107; }
        .danger { color: #dc3545; }
        .nav { margin-top: 15px; }
        .nav a { background: #007bff; color: white; padding: 8px 16px; text-decoration: none; border-radius: 4px; margin-right: 10px; }
        .timestamp { color: #666; font-size: 14px; margin-top: 10px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üîç URL Monitor Dashboard</h1>
        <p>Automated monitoring results from GitHub Actions</p>
        <div class="nav">
            <a href="failed-requests.html">üö® Failed Requests</a>
            <a href="https://github.com/$\{process.env.GITHUB_REPOSITORY || 'your-repo'}/actions">üìä View Actions</a>
        </div>
        <div class="timestamp">Last updated: $\{new Date().toLocaleString()}</div>
    </div>
    
    <div class="stats">
        $\{Object.keys(groups).map(groupName => \`
            <div class="card">
                <h3>$\{groupName}</h3>
                <div class="success" style="font-size: 24px; font-weight: bold;">$\{groups[groupName].successRate}%</div>
                <small>Success Rate</small>
                <hr>
                <div>Total Requests: $\{groups[groupName].total}</div>
                <div>Avg Response: $\{groups[groupName].avgTime}ms</div>
                <div>Failures: $\{groups[groupName].failures.length}</div>
            </div>
        \`).join('')}
    </div>
    
    <div class="card">
        <h3>Recent Activity</h3>
        <div style="max-height: 400px; overflow-y: auto;">
            $\{data.slice(0, 20).map(row => \`
                <div style="padding: 8px; border-bottom: 1px solid #eee;">
                    <strong>$\{row.name}</strong> - 
                    <span class="$\{row.success ? 'success' : 'danger'}">
                        $\{row.success ? '‚úÖ' : '‚ùå'} $\{row.status}
                    </span>
                    <small style="color: #666; margin-left: 10px;">
                        $\{new Date(row.timestamp).toLocaleString()}
                    </small>
                </div>
            \`).join('')}
        </div>
    </div>
    
    <div class="card" style="margin-top: 20px; text-align: center; color: #666;">
        <p>üìä Generated by GitHub Actions ‚Ä¢ üîÑ Updates automatically every 15 minutes</p>
        <p>üöÄ Powered by URL Monitor</p>
    </div>
</body>
</html>\`;
        }
        
        function generateFailedRequestsHTML(failures) {
          return \`<!DOCTYPE html>
<html>
<head>
    <title>Failed Requests - URL Monitor</title>
    <meta charset='utf-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; margin: 20px; background: #f5f5f5; }
        .header { background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .card { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        table { width: 100%; border-collapse: collapse; }
        th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }
        th { background: #f8f9fa; }
        .nav a { background: #007bff; color: white; padding: 8px 16px; text-decoration: none; border-radius: 4px; margin-right: 10px; }
        .danger { color: #dc3545; }
        .no-failures { text-align: center; color: #28a745; padding: 40px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üö® Failed Requests</h1>
        <p>Failed monitoring requests from GitHub Actions</p>
        <div class="nav">
            <a href="index.html">üìä Dashboard</a>
            <a href="https://github.com/$\{process.env.GITHUB_REPOSITORY || 'your-repo'}/actions">üîß View Actions</a>
        </div>
    </div>
    
    <div class="card">
        $\{failures.length === 0 ? 
          '<div class="no-failures">üéâ No recent failures! All URLs are healthy.</div>' :
          \`<table>
            <thead>
                <tr>
                    <th>Time</th>
                    <th>URL</th>
                    <th>Group</th>
                    <th>Status</th>
                    <th>Error</th>
                </tr>
            </thead>
            <tbody>
                $\{failures.map(f => \`
                    <tr>
                        <td>$\{new Date(f.timestamp).toLocaleString()}</td>
                        <td>$\{f.name}</td>
                        <td>$\{f.group_name || 'Ungrouped'}</td>
                        <td class="danger">$\{f.status}</td>
                        <td class="danger">$\{f.error || 'No details'}</td>
                    </tr>
                \`).join('')}
            </tbody>
          </table>\`
        }
    </div>
</body>
</html>\`;
        }
        "
    
    - name: Create docs directory
      run: mkdir -p docs
    
    - name: Commit and push to gh-pages
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/
        git commit -m "Update dashboard: $(date)" || exit 0
        git push origin HEAD:gh-pages --force
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
