name: URL Monitor

on:
  schedule:
    - cron: '*/15 * * * *'  # Every 15 minutes
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force monitoring run'
        required: false
        default: 'false'

jobs:
  monitor:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build TypeScript
      run: npm run build

    - name: Download existing database
      continue-on-error: true
      uses: actions/download-artifact@v4
      with:
        name: monitoring-database
        path: .

    - name: Check database status
      run: |
        if [ -f "monitor.db" ]; then
          echo "üìä Existing database found"
          sqlite3 monitor.db "SELECT COUNT(*) as total_records FROM requests;" || echo "Database needs initialization"
        else
          echo "üÜï No existing database, will create new one"
        fi

    - name: Run headless monitoring
      env:
        URLS_CSV_PATH: urls.csv
        MONITOR_TIMEOUT: 30000
        CHECK_INTERVAL: 60000
      run: npm run headless

    - name: Verify monitoring results
      run: |
        if [ -f "monitor.db" ]; then
          echo "üìà Monitoring completed successfully"
          echo "Database record count:"
          sqlite3 monitor.db "SELECT COUNT(*) as total_records FROM requests;"
          echo "Recent monitoring results:"
          sqlite3 monitor.db "SELECT name, status, responseTime, timestamp FROM requests ORDER BY timestamp DESC LIMIT 5;" || true
        else
          echo "‚ùå Database file not found after monitoring"
          exit 1
        fi

    - name: Upload database artifact
      uses: actions/upload-artifact@v4
      with:
        name: monitoring-database
        path: monitor.db
        retention-days: 30
        compression-level: 9

    - name: Generate static files for GitHub Pages
      run: |
        mkdir -p public/api
        if [ -f "monitor.db" ]; then
          # Generate results.json for last 7 days
          sqlite3 monitor.db -json "SELECT * FROM requests WHERE datetime(timestamp) >= datetime('now', '-7 days') ORDER BY timestamp DESC;" > public/api/results.json
          
          # Generate group-hierarchy.json
          node -e "
            const sqlite3 = require('sqlite3');
            const fs = require('fs');
            
            const db = new sqlite3.Database('monitor.db');
            db.all('SELECT DISTINCT group_name, countryCode, url, name FROM requests WHERE group_name IS NOT NULL ORDER BY group_name, countryCode, name', (err, rows) => {
              if (err) {
                console.error('Error:', err);
                process.exit(1);
              }
              
              const hierarchyMap = new Map();
              rows.forEach(row => {
                const key = \`\${row.group_name}|\${row.countryCode || 'no-country'}\`;
                if (!hierarchyMap.has(key)) {
                  hierarchyMap.set(key, {
                    group_name: row.group_name,
                    countryCode: row.countryCode || undefined,
                    urls: []
                  });
                }
                const entry = hierarchyMap.get(key);
                if (!entry.urls.find(u => u.url === row.url)) {
                  entry.urls.push({ url: row.url, name: row.name });
                }
              });
              
              const hierarchy = Array.from(hierarchyMap.values());
              fs.writeFileSync('public/api/group-hierarchy.json', JSON.stringify(hierarchy, null, 2));
              console.log(\`Generated hierarchy with \${hierarchy.length} groups\`);
              db.close();
            });
          " || echo "No group data available"
          
          # Generate stats.json
          sqlite3 monitor.db -json "
            SELECT 
              url, name, group_name, countryCode,
              COUNT(*) as totalRequests,
              SUM(CASE WHEN success = 1 THEN 1 ELSE 0 END) as successfulRequests,
              SUM(CASE WHEN success = 0 THEN 1 ELSE 0 END) as failedRequests,
              AVG(responseTime) as averageResponseTime,
              MAX(timestamp) as lastChecked
            FROM requests 
            WHERE datetime(timestamp) >= datetime('now', '-24 hours')
            GROUP BY url, name, group_name, countryCode
            ORDER BY name
          " > public/api/stats.json
          
          echo "üìÑ Generated static API files for GitHub Pages"
          ls -la public/api/
        else
          echo "‚ùå No database found for static file generation"
        fi

    - name: Commit and push database updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add the static files
        git add public/api/
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update monitoring data - $(date -u '+%Y-%m-%d %H:%M:%S UTC')" || echo "Nothing to commit"
          git push || echo "Push failed"
        fi

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./public
        enable_jekyll: false
        cname: # Add your custom domain if you have one